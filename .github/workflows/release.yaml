name: release

on:
  push:
    branches: [main]

jobs:
  release:
    name: Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest] # macos-latest, windows-latest
        node: [22.19.0]
        pnpm: [10.17.0]
    environment: production
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ matrix.pnpm }}
      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Get GitHub App Token
        id: app_token
        run: |
          echo "${{ secrets.GH_APP_PRIVATE_KEY }}" > private-key.pem
          TOKEN=$(node <<EOF
          const { createAppAuth } = require("@octokit/auth-app");
          const { readFileSync } = require("fs");
          (async () => {
            const auth = createAppAuth({
              appId: "${{ secrets.GH_APP_ID }}",
              privateKey: readFileSync("private-key.pem", "utf8"),
              installationId: "${{ secrets.GH_INSTALLATION_ID }}"
            });
            const installationAuthentication = await auth({ type: "installation" });
            console.log(installationAuthentication.token);
          })();
          EOF
          )
          echo "::add-mask::$TOKEN"
          echo "GITHUB_TOKEN=$TOKEN" >> $GITHUB_ENV
          rm -f private-key.pem

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          REPO_URL: '${{ github.server_url }}/${{ github.repository }}'
        run: npx semantic-release
